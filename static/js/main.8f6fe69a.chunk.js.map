{"version":3,"sources":["MastodonDialog.js","App.js","reportWebVitals.js","index.js"],"names":["MastodonDialog","open","onClose","onConfirm","mastodonInstance","useState","instance","setInstance","Dialog","DialogTitle","id","DialogContent","DialogContentText","TextField","autoFocus","margin","label","type","defaultValue","onChange","event","target","value","fullWidth","DialogActions","Button","onClick","color","useStyles","makeStyles","theme","paper","padding","maxWidth","full","width","height","content","backgroundColor","palette","background","default","page","appBar","position","linkButton","marginRight","spacing","textField","marginBottom","LinkButton","title","url","classes","Link","className","href","rel","Content","children","Box","display","justifyContent","flexGrow","clone","Paper","TwitterButton","message","text","encodeURIComponent","ParlerButton","PlurkButton","App","localStorage","setMessage","mastodonDialogOpen","setMastodonDialogOpen","setMastodonInstance","MastodonButton","preventDefault","flexDirection","alignItems","Typography","gutterBottom","variant","multiline","rows","window","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8f6fe69a.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst MastodonDialog = ({open, onClose, onConfirm, mastodonInstance}) => {\n\n  const [instance, setInstance] = useState(mastodonInstance);\n\n  const confirm = () => {\n    onConfirm(instance);\n    onClose();\n  }\n\n  const handleChange = (event) => {\n    setInstance(event.target.value);\n  }\n\n  return (\n    <Dialog open={open} onClose={onClose}>\n      <DialogTitle id=\"form-dialog-title\">Mastodon</DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n        Please enter your Mastodon server address\n        </DialogContentText>\n        <TextField\n          autoFocus\n          margin=\"dense\"\n          id=\"name\"\n          label=\"Address\"\n          type=\"email\"\n          defaultValue={mastodonInstance}\n          onChange={handleChange}\n          fullWidth\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} color=\"primary\">\n          Cancel\n        </Button>\n        <Button onClick={confirm} color=\"primary\">\n          Confirm\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n\nexport default MastodonDialog;\n","import React, {useState} from 'react';\nimport Box from '@material-ui/core/Box';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport MastodonDialog from './MastodonDialog.js';\n\nconst defaultMastodon = 'https://pawoo.net'\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    padding: '20px',\n    margin: '0px',\n    maxWidth: '640px',\n  },\n  full: {\n    width: '100%',\n    height: '100%',\n  },\n  content: {\n    width: '100%',\n    height: '100%',\n    backgroundColor: theme.palette.background.default,\n  },\n  page: {\n    width: '100vw',\n    height: '100vh'\n  },\n  appBar: {\n    position: 'relative',\n    margin: 0,\n    padding: 0,\n  },\n  linkButton: {\n    marginRight: theme.spacing(1)\n  },\n  textField: {\n    marginBottom: theme.spacing(2)\n  }\n}));\n\nconst LinkButton = ({title, url, onClick}) => {\n  const classes = useStyles();\n\n  return (\n    <Link\n      className={classes.linkButton}\n      target=\"_blank\" href={url}\n      rel=\"noopener noreferrer\"\n      onClick={onClick}>\n      {title}\n    </Link>\n  )\n}\n\nconst Content = ({children}) => {\n  const classes = useStyles();\n\n  return (\n    <Box display=\"flex\" justifyContent=\"center\" className={classes.content}>\n      <Box flexGrow={1} clone>\n          <Paper className={classes.paper}>\n            {children}\n          </Paper>\n        </Box>\n    </Box>\n  )\n}\n\nconst TwitterButton = ({message}) => {\n  const text = encodeURIComponent(message);\n  const url = `https://twitter.com/intent/tweet?text=${text}`\n\n  return (\n    <LinkButton title=\"Twitter\" url={url}></LinkButton>\n  )\n}\n\nconst ParlerButton = ({message}) => {\n  const text = encodeURIComponent(message);\n  const url = `https://parler.com/new-post?message=${text}`\n  return (\n    <LinkButton title=\"Parler\" url={url}></LinkButton>\n  )\n}\n\nconst PlurkButton = ({message}) => {\n  const text = encodeURIComponent(message);\n  const url = `http://plurk.com/?qualifier=shares&status=${text}`\n\n  return (\n    <LinkButton title=\"Plurk\" url={url}></LinkButton>\n  )\n}\n\nfunction App() {\n  const classes = useStyles();\n\n  const [message, setMessage] = useState(localStorage.message ?? '');\n  const [mastodonDialogOpen, setMastodonDialogOpen] = useState(false);\n  const [mastodonInstance, setMastodonInstance] = useState(localStorage.mastodonInstance ?? defaultMastodon);\n\n  const handleChange = (event) => {\n    setMessage(event.target.value);\n    localStorage.message = event.target.value;\n  };\n\n  const MastodonButton = ({message, instance}) => {\n    const text = encodeURIComponent(message);\n    const url = `${instance}/share?text=${text}`\n\n    const check = (event) => {\n      setMastodonDialogOpen(true);\n      event.preventDefault();\n    }\n\n    return (\n      <LinkButton title=\"Mastodon\" url={url} onClick={check}></LinkButton>\n    )\n  }\n\n  const closeMastodonDialog = () => {\n    setMastodonDialogOpen(false);\n  }\n\n  const openMastodon = (instance) => {\n    setMastodonInstance(instance);\n    localStorage.mastodonInstance = instance;\n    const text = encodeURIComponent(message);\n    const url = `${instance}/share?text=${text}`\n    window.open(url, '_blank');\n  }\n\n  return (\n      <Content>\n        <Box display=\"flex\" flexDirection=\"column\" className={classes.full}>\n\n          <Box display='flex'  alignItems=\"center\" >\n            <Typography gutterBottom display=\"inline\" variant=\"h5\">\n              PostToX\n            </Typography>\n          </Box>\n\n          <Typography gutterBottom variant=\"subtitle1\">Write something and post to X SNS platforms</Typography>\n          <Box clone>\n            <TextField\n              label=\"Message\"\n              multiline\n              variant=\"filled\"\n              rows={10}\n              onChange={handleChange}\n              defaultValue={message}\n              className={classes.textField}\n            />\n          </Box>\n          <Box display=\"flex\" alignItems=\"center\">\n\n            <Typography variant=\"body2\">\n            Post to :&nbsp;\n            </Typography>\n\n            <TwitterButton message={message}/>\n            <ParlerButton message={message}/>\n            <PlurkButton message={message}/>\n            <MastodonButton message={message}/>\n          </Box>\n        </Box>\n        <MastodonDialog\n          open={mastodonDialogOpen}\n          onClose={closeMastodonDialog}\n          onConfirm={openMastodon}\n          mastodonInstance={mastodonInstance}\n        ></MastodonDialog>\n      </Content>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}